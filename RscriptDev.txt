options(java.parameters = "-Xmx80000m")
library(DESeq2)
library(xlsx)


# Extract a Sub-matrix of counts for each group 
subgem <- function(gem, anot, group ){
  
  datalist = list()
  print(str(group))
  subanot = subset(anot, time == group)
  for (id in row.names(subanot)) {
    ind = which(colnames(gem) == id)
    genes = gem[0]
    exp = gem[,ind]
    datalist[[id]] <- exp
  }
  subcounts = cbind(genes, datalist)
  return(subcounts)
}


#Extract a subset of the sample annotation matrix for each group
subanot <- function(anot, group){
  
  datalist = list()
  print(str(group))
  subanot = subset(anot, time == group)
  
  return(subanot)
}


# Run DESeq2 
run_deseq <- function(counts, annotation){
  dds <- DESeqDataSetFromMatrix(countData = counts, 
                                colData = annotation,
                                design = ~ condition)

  
  # filter genes with low total counts across all samples
  dds <- dds[rowSums(counts(dds)) >= 50,]
  
  dds <- DESeq(dds)
  
  # calculate FPM (fragments per million)
  norm = fpm(dds)
  
  
  #Sort the columns in the FPM DF.  First three samples control, next three inoculated
  
  conditionA = which(annotation[1] == "control")
  conditionB = which(annotation[1] == "Inoculated")
  
  norm = subset(norm, select=c(conditionA, conditionB))
  
  
  # Retrieve results
  res <- results(dds, contrast=c("condition", "Inoculated", "control"), cooksCutoff = 0.99)
  
  print(summary(res))
  
  # Add FPM values to results for easy visualization
  res <- cbind(res, norm)
  
  resultsNames(dds)
  
  return(res)
}


main <- function(countfile, anotfile){
  outname = "DE_cooks-0.99_prefiltered.xls"
  counts = read.delim(countfile, sep=',', header=TRUE, row.names='gene_id')
  samples = read.delim(anotfile, sep='\t', row.names = 1)
  
  groups = unique(samples$time)
  
  for (t in groups){
    subcounts = subgem(counts, samples, t)
    subannotation = subanot(samples, t)
    results = run_deseq(subcounts, subannotation)
    
    #Filter and sort results table
    f_results = subset(results, padj < 0.05)
    o_results = f_results[order(f_results$padj),]
    
    
    # Write results of each group to an excel sheet in the workbook
    write.xlsx(o_results, outname, sheetName=t,
               col.names=TRUE, row.names=TRUE, append=TRUE)
  }
  return(results)
}

main('gene_count_matrix.csv', 'conditions.txt')


